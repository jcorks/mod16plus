@:Mod16 = import(module:'Mod16Plus.Core');
@:class = import(module:'Matte.Core.Class');
@:Cartridge = Mod16.Cartridge;

@:View = Cartridge.import(source:'view');
@:Fetcher = Cartridge.import(source:'fetcher');
@:Project = Cartridge.import(source:'project');


@:Widgets = Cartridge.subCartridge(name:'widgets');

@:UILabel = Widgets.UILabel;
@:UI = Widgets.UI;
@:UIFlat = Widgets.UIFlat;
@:UITile = Widgets.UITile;
@:UIScrollable = Widgets.UIScrollable;
@:UIButton = Widgets.UIMousable;
@:UIRadioLayout = Widgets.UIRadioLayout;
@:UILayout = Widgets.UILayout;
@:UICanvas = Widgets.UICanvas;
@:hexDisplay = Cartridge.import(source:'hexdisplay');






@:BUTTON_TILE1_ID = [
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
];


@:BUTTON_TILE2_ID = [
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
];

@:BUTTON_TILE3_ID = [
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
];


@:BUTTON_TILE4_ID = [
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
];

@:BUTTON_TILE5_ID = [
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,

    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5
];

@:BUTTON_TILES= [
    BUTTON_TILE1_ID,
    BUTTON_TILE2_ID,
    BUTTON_TILE3_ID,
    BUTTON_TILE4_ID,
    BUTTON_TILE5_ID
];

@:ICON_TILE_DATA = [
    0, 0, 0, 0, 0, 0, 1, 1,
    0, 0, 0, 0, 1, 1, 1, 0,
    0, 0, 0, 0, 1, 1, 1, 0,
    0, 0, 0, 1, 0, 0, 1, 0,
    0, 0, 0, 1, 1, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
];

@:palette = [
    [1, 1, 1, 1],
    [1, 1, 1, 1],
    [1, 1, 1, 1],
    [1, 1, 1, 1],
    [1, 1, 1, 1]
];



@:Painter = class(
    inherits : [UI],
    define:::(this) {
        

        @:Window = Cartridge.import(source:'window');
        
        @:leftBox = Cartridge.import(source:'tp_selector')(
            onChoosePalette::(data) {
                @:paletteData = data;
               
                canvas.palette = paletteData; 
                [1, 6]->for(do:::(i) {
                    colorChoices[i].palette = paletteData;
                });               


            },
            
            onChooseTile::(data, id) {
                canvas.tile = data;
                tileSaveID = id;
            }
        );
        @tileSaveID;



        @:makeColorItem ::(index) {
            when(index == 0) UILabel.new(text:'');
            @:label = UITile.new(paletteData:palette, tileData:BUTTON_TILES[index-1]);            
            return label;
        };


        @:colorChoices = [
            makeColorItem(index:0),
            makeColorItem(index:1),
            makeColorItem(index:2),
            makeColorItem(index:3),
            makeColorItem(index:4),
            makeColorItem(index:5),
        ];
        @:colorRadio = UIRadioLayout.new(
            choices : [
                colorChoices[0],
                colorChoices[1],
                colorChoices[2],
                colorChoices[3],
                colorChoices[4],
                colorChoices[5]
            ]
        );   
        
        colorRadio.onChoose = ::(choice) {
            canvas.pen = choice;
        };
            
        @:canvas = UICanvas.new();
        canvas.size = 112;
        canvas.onDraw = ::{
            when(tileSaveID == empty) empty;
            // when an edit is made, save the sprite 
            Project.saveTile(id:tileSaveID, data:canvas.tile);
            if (leftBox.tileMode) ::<= {
                leftBox.rereadTileChoices();
            };
            
        };

        @:mainbox = UIFlat.new(
            children: [
                [leftBox.widget, 0.325],
                [canvas, 0.55],
                [colorRadio, 0.125]
            ]
        );
        mainbox.background = '#222222';
        

        this.addChild(child:mainbox, sizeRequest:1);

                
        this.events.installHooks(events: {
            onMove ::(detail) {
                mainbox.move(x:this.x, y:this.y);
            },
            
            onResize ::(detail) {
                mainbox.resize(width:this.width, height:this.height);
            },
            
            onShow ::(detail) {
                if (leftBox.tileMode)
                    leftBox.rereadTileChoices()
                else
                    leftBox.rereadPaletteChoices();
            }
        });



        
        this.interface = {
            // All the menus within the 
            // view. Should be an array of 
            // arrays, where each inner array 
            // is a string for the menu and a function
            // called when clicking the actions.
            menus : {
                get :: <- [
                ]
            },

            icon : {
                get :: {
                    return ICON_TILE_DATA;
                }
            }
          
        };
        

        
    }
    
);



return Painter;
