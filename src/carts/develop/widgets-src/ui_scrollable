@:class = import(module:'Matte.Core.Class');
@:SES = import(module:'SES.Core');
@:Cartridge = SES.Cartridge;
@:Fetcher = Cartridge.import(source:'fetcher');
@:UI = Cartridge.import(source:'ui');



@:palette = Fetcher.Palette.newID();
Cartridge.Palette.set(
    index:palette,
    colors: [
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]
    ]
);


@:line = Fetcher.Tile.newID();
Cartridge.Tile.set(
    index:line,
    data: [
        1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0,

        1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0
    ]
);


return class(
    inherits:[UI],
    define:::(this) {
        @entered =  false;
        @clicked = false;        
        @passiveColor = '#070707';


        @:scrollbar = Fetcher.Sprite.newID();
        Cartridge.Sprite.set(
            index:scrollbar,
            show: false,
            tile: line,
            palette
        );


        @itemTop = 0;
        @itemCount_ = 1;
        @itemsPerPage_ = 1;

        @userScroll = ::(itemTop, itemCount, itemsPerPage){};

        @inputid;
        @:connectInput = ::{   
            inputid = SES.Input.addCallback(
                device: SES.Input.DEVICES.POINTER0,
                callback ::(event, x, y, button) {
                    match(event) {                    
                      (SES.Input.EVENTS.POINTER_SCROLL): ::<= {
                        itemTop += y;
                        if (itemTop > itemCount_ - itemsPerPage_) itemTop = itemCount_ - itemsPerPage_;
                        if (itemTop < 0) itemTop = 0;
                        userScroll(itemTop, itemCount:itemCount_, itemsPerPage:itemsPerPage_);
                        redrawScrollbar();
                      }
                    };
                }
            );
        };
        connectInput();
        
        @:redrawScrollbar ::{
            when(itemsPerPage_ > itemCount_) ::<= {
                Cartridge.Sprite.set(
                    index:scrollbar,
                    show: false
                );
            };
            
            @:scrollX = this.x + this.width - 1;
            @:scrollY = this.y + (this.height / itemCount_) * itemTop;
            
            Cartridge.Sprite.set(
                index:scrollbar,
                show: true,
                layer: this.layer+1,
                x: scrollX,
                y: scrollY
            );




            @scale = (1 / 8) * this.height * (itemsPerPage_ / itemCount_);
            print(message:'Scroll: [' + scrollX + ', ' + scrollY + ', ' + scale + ']');
            if (scale <  1/ 8) scale = 1/8;
            Cartridge.Sprite.transform(
                index:scrollbar,
                scaleY: scale
            );
        };


        @:recenterChild ::{
            when(this.children->keycount == 0) empty;
            @:child = this.children[0];

            child.resize(
                width: this.width - 4,
                height: this.height - 4
            );

            child.move(
                x: this.x + this.width/2 - child.width/2,
                y: this.y + this.height/2 - child.height/2
            );
        };
        
        
        this.constructor = ::(onScroll, child, itemCount => Number, itemsPerPage => Number) {
            if (onScroll) userScroll = onScroll;
            if (child) this.addChild(child, sizeRequest:1);
            
            itemCount_ = itemCount;
            itemsPerPage_ = itemsPerPage;


            this.background = passiveColor;
            redrawScrollbar();
            return this;
        };
        
        
        this.events.installHooks(
            events: {
                onMove ::(detail)<- recenterChild(),
                onResize ::(detail)<- recenterChild(),
                onHide ::(detail) {
                    SES.Input.removeCallback(device:SES.Input.DEVICES.POINTER0, id:inputid);
                    inputid = -1;
                    Cartridge.Sprite.set(
                        index:scrollbar,
                        show: false
                    );
                },
                
                onShow ::(detail) {
                    connectInput();
                    redrawScrollbar();
                }
            }
        );        
        
        
        
        this.interface = {
            onScroll : {
                set::(value) <- userScroll = value => Function
            },

            currentScrollPosition : {
                get ::<- itemTop
            },
            setupPage ::(itemCount, itemsPerPage) {
                itemCount_ = itemCount;
                itemsPerPage_ = itemsPerPage;
                if (itemTop > itemCount_ - itemsPerPage_) itemTop = itemCount_ - itemsPerPage_;
                if (itemTop < 0) itemTop = 0;                
                redrawScrollbar();
                
            }
            
        };
    }
);
