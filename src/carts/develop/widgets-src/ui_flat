@:class = import(module:'Matte.Core.Class');
@:Mod16 = import(module:'Mod16Plus.Core');
@:Cartridge = Mod16.Cartridge;
@:UI = Cartridge.import(source:'ui');

return class(
    inherits:[UI],
    define:::(this) {
        @padding = 1;
        @freezeReset = false;
        @:resetChildren ::{
            @:requests =  this.childrenSizeRequests;
            @last = 0;
            this.children->foreach(do:::(i, child) {
                child.move(y: padding + this.y, x: padding + this.x + last);
                child.resize(
                    height:this.height - padding*2,
                    width:requests[i]*this.width - padding*2
                );
                last += requests[i]*this.width;
            });
        };        
        
        this.constructor = ::(
            children => Object,
            enableBackground
        ) {
            freezeReset = true;
            if (enableBackground != empty) this.enableBackground = enableBackground;
            children->foreach(do:::(i, value){
                this.addChild(child:value[0] => Object, sizeRequest:value[1] => Number);
            });
            freezeReset = false;
            resetChildren();
            return this;
        };


        this.events.installHooks(
            events:{
                onChildCountChange ::(detail){
                    when(freezeReset) empty;
                    resetChildren();            
                },
                
                onResize ::(detail) {
                    resetChildren();            
                },
                
                onMove ::(detail) {
                    resetChildren();            
                }
            
            }
        );
        
        
        this.interface = {
            padding: {
                set ::(value => Number) {
                    padding = value;
                    resetChildren();
                }
            },
            
        
            
        };
    }
);
