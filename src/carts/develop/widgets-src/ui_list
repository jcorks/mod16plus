@:class = import(module:'Matte.Core.Class');
@:Mod16 = import(module:'Mod16Plus.Core');
@:Cartridge = Mod16.Cartridge;
@:Fetcher = Cartridge.import(source:'fetcher');
@:UI = Cartridge.import(source:'ui');



@:palette = Fetcher.Palette.newID();
Cartridge.Palette.set(
    index:palette,
    colors: [
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]
    ]
);


@:line = Fetcher.Tile.newID();
Cartridge.Tile.set(
    index:line,
    data: [
        1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0,

        1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0
    ]
);

return class(
    inherits:[UI],
    define:::(this) {
        @padding = 1;
        @iter = 0;
        @count = 3;

        @:scrollbar = Fetcher.Sprite.newID();
        
        Cartridge.Sprite.bind(index:scrollbar);
        Cartridge.Sprite. = {
            show: false,
            tile: line,
            palette:palette
        };


        @:resetChildren ::{
            @:requests =  this.childrenSizeRequests;
            @:children = this.children;
            children->foreach(do:::(i, child) <- child.hide());
            @last = 0;
            @max = if (iter+count > children->keycount) children->keycount else iter+count;
            [iter, max]->for(do:::(i) {
                @:child = children[i];                
                child.show();
                child.move(x: padding + this.x, y: padding + this.y + last);
                child.resize(
                    width:this.width - padding*2,
                    height:(1/count)*this.height - padding*2
                );
                last += (1/count)*this.height;
            });

            if (children->keycount > count) ::<={
                Cartridge.Sprite.bind(index:scrollbar);
                Cartridge.Sprite. = {
                    show: true,
                    layer: this.layer,
                    x: this.x + this.width,
                    y: this.y + (this.height / children->keycount) * iter,
                    scaleY: (1 / 8) * this.height * (count / children->keycount)
                };

                
            } else ::<= {
                Cartridge.Sprite.bind(index:scrollbar);
                Cartridge.Sprite.show = false;
            };

    
        };        
        



        @inputid;
        @:connectInput = ::{   
            inputid = Mod16.Input.addCallback(
                device: Mod16.Input.DEVICES.POINTER0,
                callback ::(event, x, y, button) {
                    when(event != Mod16.Input.EVENTS.POINTER_SCROLL) empty;
                    
                    when (y > 0) ::<= {
                        when(iter <= 0) empty;
                        iter -= 1;
                        resetChildren();
                    };

                    when (y < 0) ::<= {
                        when(iter >= this.children->keycount - count) empty;
                        iter += 1;
                        if (iter < 0) iter = 0;
                        resetChildren();
                    };

                    
                }
            );
        };

        
        
        this.constructor = ::(
            items => Object,
            enableBackground,
            showCount => Number
        ) {
            if (enableBackground != empty) this.enableBackground = enableBackground;
            count = showCount;
            items->foreach(do:::(i, value){
                this.addChild(child:value => Object, sizeRequest:1);
            });
            return this;
        };
        
        
        this.events.installHooks(
            events: {
                onChildCountChange ::(detail){
                    resetChildren();            
                },                            
                
                onResize ::(detail) {
                    resetChildren();            
                },
                
                onMove ::(detail) {
                    resetChildren();            
                },
                
                onShow ::(detail) {
                    connectInput();
                },
                
                onHide ::(detail) {
                    Mod16.Input.removeCallback(id:inputid, device: Mod16.Input.DEVICES.POINTER0);
                    inputid = empty;
                }
            }
        );        
        
        
        this.interface = {
            padding: {
                set ::(value => Number) {
                    padding = value;
                    resetChildren();
                }
            }
        
            
        };
        this.enableBackground = false;
        connectInput();
    }
);
