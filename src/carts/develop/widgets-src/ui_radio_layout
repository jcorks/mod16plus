@:class = import(module:'Matte.Core.Class');
@:SES = import(module:'SES.Core');
@:Cartridge = SES.Cartridge;
@:Fetcher = Cartridge.import(source:'fetcher');
@:UI = Cartridge.import(source:'ui');
@:UILabel    = Cartridge.import(source:'ui_label');
@:UILayout   = Cartridge.import(source:'ui_layout');
@:UIFlat   = Cartridge.import(source:'ui_flat');
@:UIMousable   = Cartridge.import(source:'ui_mousable');



// it is basically a lyout of buttons with special background settings.
return class(
    inherits:[UI],
    define:::(this) {

        @layout = UILayout.new(children:[], enableBackground:false);
        @choice = -1;
        @userChoose = ::(choice){};
        @:choiceWidgets = [];
        
        

        this.constructor = ::(choices, onChoose) {
            this.addChild(child:layout, sizeRequest:1);
            if (choices != empty) this.choices = choices;
            if (onChoose != empty) userChoose = onChoose;
            return this;
        };

        @:resetChild ::{
            layout.move(x: this.x, y: this.y);
            layout.resize(width:this.width, height:this.height);
        };

        this.events.installHooks(
            events: {
                onChildCountChange ::(detail){
                    resetChild();            
                },                            
                
                onResize ::(detail) {
                    resetChild();            
                },
                
                onMove ::(detail) {
                    resetChild();            
                }
            }
        );

        this.interface = {
            choices : {
                set ::(value => Object) {
                    if (choiceWidgets->keycount < value->keycount) ::<= {
                        [choiceWidgets->keycount, value->keycount]->for(do:::(i) {
                            @:tick = UILabel.new(text:''); 
                            @:child = UIFlat.new(
                                children: [
                                    [tick, 0],
                                ]
                            );
                            @:button = UIMousable.new(child);
                            
                            
                            choiceWidgets->push(value:[button, tick, child]);
                        });
                    };

                    layout.clearChildren();                    
                    @:set = [];
                    
                    value->foreach(do:::(i, v) {
                        @:choice = choiceWidgets[i];
                    
                        choice[2].clearChildren();
                        choice[2].addChild(child:choice[1], sizeRequest: 0);
                        choice[2].addChild(child:v, sizeRequest: 1);
                    
                        ::(value){
                            @index = value;
                            choice[0].onClick = ::{
                                this.choice = i;
                            };
                        }(value: i);

                        //layout.addChild(child:button, sizeRequest:1/value->keycount);
                        set->push(value:[choice[0], 1/value->keycount]);
                    });
                    layout.reset(children:set);
                }
            },

            onChoose : {
                set ::(value) <- userChoose = value => Function
            },

            choice : {
                get ::<- choice,
                set ::(value => Number) {
                    when (value == choice) empty;
                    choice = value;
                    choiceWidgets->foreach(do:::(i, v) {
                        v[1].text = '';
                    });

                    when(choice < 0 || choice >= choiceWidgets->keycount) empty;
                    choiceWidgets[choice][1].text = '>';

                    userChoose(choice:value);
                }
            }

        };
    }
);

