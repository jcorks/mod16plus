@:class = import(module:'Matte.Core.Class');
@:Mod16 = import(module:'Mod16Plus.Core');
@:Cartridge = Mod16.Cartridge;
@:Fetcher = Cartridge.import(source:'fetcher');
@:AsciiRenderer = Cartridge.subCartridge(name:'ascii-renderer');
@:UI = Cartridge.import(source:'ui');

return class(
    inherits:[UI],
    define:::(this) {
    
        
        @foregroundPalette = [1, 1, 1];
        @stringRef;

        @text_ = '';
        
        @:readjust ::{            
            if (stringRef) ::<= {
                AsciiRenderer.destroy(refs:stringRef);
            };
            stringRef = AsciiRenderer.create(
                x:this.x + this.width / 2  - (text_->length * 6)  / 2,
                y:this.y + this.height / 2 - (8) / 2,
                string: text_,
                layer:this.layer+1,
                color: foregroundPalette
            );
            
                          
        };
        
        
        this.constructor = ::(text) {
            this.foreground = '#ffffff';
            this.text = text;
            this.enableBackground = false;
            return this;
        };
        
        
        this.events.installHooks(
            events:{
                onShow ::(detail){
                    readjust();
                },
                
                onHide ::(detail){
                    if (stringRef) ::<= {
                        AsciiRenderer.destroy(refs:stringRef);
                    };
                    stringRef = empty;
                },
                
                onResize ::(detail) {
                    if (this.shown) ::<= {
                        readjust();
                    };
                },
                
                onMove ::(detail) {
                    if (this.shown) ::<= {
                        readjust();
                    };
                },
                
                onLayerChange::(detail) {
                    if (this.shown) ::<= {
                        readjust();
                    };
                }

            }
        );        
        
        
        this.interface = {
            foreground : {
                set ::(value => String) {
                    foregroundPalette = value;
                    if (this.shown) ::<= {
                        readjust();
                    };
                }
            },
            

            
            text : {
                set ::(value => String) {
                    text_ = value;
                    if (this.shown) ::<= {
                        readjust();
                    };
                },
                
                get ::(value) {
                    return text_;
                }
            }
        };
    }
);
