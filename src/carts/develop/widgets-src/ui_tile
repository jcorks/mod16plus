@:class = import(module:'Matte.Core.Class');
@:SES = import(module:'SES.Core');
@:Cartridge = SES.Cartridge;
@:Fetcher = Cartridge.import(source:'fetcher');
@:UI = Cartridge.import(source:'ui');
return class(
    inherits:[UI],
    define:::(this) {
    
        @:sprite = Fetcher.Sprite.newID();
        @:tile = Fetcher.Tile.newID();
        @:paletteID = Fetcher.Palette.newID();
        
        Cartridge.Sprite.set(
            index:sprite,
            palette: paletteID,
            tile
        );
        
        @resizeable = false;
        
        @:reposition :: {
            if (resizeable) ::<= {
                Cartridge.Sprite.set(
                    index:sprite,
                    x:this.x,
                    y:this.y
                );
                Cartridge.Sprite.transform(
                    index:sprite,
                    scaleX: this.width / 8,
                    scaleY: this.height / 8
                );

            } else 
                Cartridge.Sprite.set(
                    index:sprite,
                    x:this.x + this.width / 2 - 4,
                    y:this.y + this.height / 2 - 4
                )
            ;
        
        };
        this.events.installHooks(
            events:{
                onShow ::(detail){
                    Cartridge.Sprite.set(
                        index:sprite,
                        show: true
                    );
                },
                
                onHide ::(detail){
                    Cartridge.Sprite.set(
                        index:sprite,
                        show: false
                    );
                },
                
                onResize ::(detail) {
                    reposition();
                },
                
                onMove ::(detail) {
                    reposition();
                },
                
                onLayerChange::(detail) {
                    Cartridge.Sprite.set(
                        index:sprite,
                        layer: this.layer
                    );
                }

            }
        );        
        
        this.constructor = ::(paletteData, tileData) {
            if (paletteData == empty)
                paletteData = [
                    [0, 0, 0],
                    [0, 0, 0],
                    [0, 0, 0],
                    [0, 0, 0]
                ];
                
            if (tileData == empty)
                tileData = [
                    0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0,

                    0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0,
                ];                


            Cartridge.Tile.set(
                index:tile,
                data:tileData
            );            
            
            Cartridge.Palette.set(
                index:paletteID,
                colors: paletteData
            );
            return this;
        };
        
        this.interface = {
            palette : {
                set ::(value => Object) {
                    Cartridge.Palette.set(
                        index:paletteID,
                        colors: value
                    );  
                },
                
                get :: {
                    return Cartridge.Palette.get(
                        index:paletteID
                    );
                }                
            },

            resizeable : {
                set ::(value => Boolean) {
                    resizeable = value;
                    reposition();
                }
            },
            
            tile : {
                set ::(value => Object) {
                    Cartridge.Tile.set(
                        index:tile,
                        data: value
                    );
                },
                
                get :: {
                    return Cartridge.Tile.get(
                        index:tile
                    );
                }
            }
        };

        this.enableBackground = false;
    }
);
