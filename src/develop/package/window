@:SES = import(module:'SES.Core');
@:Debug = import(module:'SES.Debug');
@:Fetcher = import(module:'fetcher');
@:Editor = import(module:'editor');
@:Button = import(module:'button');
@:Textarea = import(module:'textarea');
@:class = import(module:'Matte.Core.Class');

@:UILayout = import(module:'ui_layout');
@:UIFlat = import(module:'ui_flat');
@:UIButton = import(module:'ui_mousable');
@:UILabel = import(module:'ui_label');
@:UIRoot = import(module:'ui_root');
@:UIEntry = import(module:'ui_entry');
@:UITile = import(module:'ui_tile');



@:LAYER_DIALOG = 40;
@:LAYER_BASE = -50;


@:menuButtons = [
    UIButton.new(child:UITile.new(palette:0, tile:'_'->charCodeAt(index:0))),
    UIButton.new(child:UITile.new(palette:0, tile:'_'->charCodeAt(index:0))),
    UIButton.new(child:UITile.new(palette:0, tile:'_'->charCodeAt(index:0))),
    UIButton.new(child:UITile.new(palette:0, tile:'_'->charCodeAt(index:0))),
    UIButton.new(child:UITile.new(palette:0, tile:'_'->charCodeAt(index:0))),
    UIButton.new(child:UITile.new(palette:0, tile:'_'->charCodeAt(index:0)))
];

menuButtons->foreach(do:::(i, button) <- button.hide());

@:content = UILayout.new(children:[]);
@:buttonTop = UIFlat.new(
    children: [
        [menuButtons[0], 1/8],
        [menuButtons[1], 1/8],
        [menuButtons[2], 1/8],
        [menuButtons[3], 1/8],
        [menuButtons[4], 1/8],
        [menuButtons[5], 1/8]    
    ]
);
@:buttonBot = UIFlat.new(children:[]);
content.background = '#352a41';
@rootView = UIRoot.new(
    width:240,
    height:160,
    layer:LAYER_BASE,
    view: 

        UILayout.new(
            children: [
                [buttonTop, 0.08],
                [content, 0.84],
                [buttonBot, 0.08]
            ]
        )

);


@currentView;
@:selectView::(view){
    if (currentView)
        currentView.hide();
    currentView = view;
    content.addChild(child:view, sizeRequest:1);
    view.show();


    @menuItemCount = view.menus->keycount;
    view.menus->foreach(do:::(index, menu) {
        menuButtons[index].show();
        menuButtons[index].children[0].palette = menu[0];
        menuButtons[index].children[0].tile = menu[1];
        menuButtons[index].onClick = ::{
            menu[2]();
        };
    });
    
    [menuItemCount, 5]->for(do:::(i) {
        menuButtons[i].hide();
    });
};

@:views = [];




return class(
    define:::(this) {

        @:dialogControl = ::<= {
        
            @:okButton     = UIButton.new(child:UILabel.new(text:'Ok'));
            @:yesButton    = UIButton.new(child:UILabel.new(text:'yes'));
            @:noButton     = UIButton.new(child:UILabel.new(text:'no'));
            
            @:promptw = UILabel.new(text:'');
            @:entry = UIEntry.new(text:'');

            @:dialog = UIRoot.new(
                width:200,
                height:100,
                layer:40,
                view: UILayout.new(
                    children: [
                        [promptw, 0.35],
                        [entry, 0.35],
                        [UIFlat.new(
                            enableBackground: false,
                            children: [
                                [yesButton, 1/3],                            
                                [okButton, 1/3],                          
                                [noButton, 1/3]                            
                            ]
                        ), 0.3]
                    ]
                )
            );
            
            dialog.move(x:20, y:30);


            
            return {
                setup::(
                    prompt => String,
                    onYes,
                    onNo,
                    onOK,
                    onEntry
                ) {
                    if(currentView) currentView.hide();
                    dialog.show();
                    promptw.text = prompt;
                    if (onYes) ::<= {
                        yesButton.show();
                        yesButton.onClick = ::{
                            dialog.hide();
                            onYes();
                            if (currentView) currentView.show();
                        };
                    } else yesButton.hide();

                    if (onNo) ::<= {
                        noButton.show();
                        noButton.onClick = ::{
                            dialog.hide();
                            onNo();
                            if (currentView) currentView.show();
                        };
                    } else noButton.hide();

                    if (onOK) ::<= {
                        okButton.show();
                        okButton.onClick = ::{
                            dialog.hide();
                            onOK();
                            if (currentView) currentView.show();
                        };
                    } else okButton.hide();

                    if (onEntry) ::<= {
                        entry.text = '';
                        entry.show();
                    } else entry.hide();




                },
                
                getEntryText ::{
                    return entry.text;
                }
                

            };   
        };

        this.interface = {
            start :: {
                if (views->keycount == 0) 
                    views->push(value:Editor.new());
                @:Project = import(module:'project');
                this.question(
                    text: 'Open existing?',
                    onResponse ::(which) {
                        // new
                        if (!which) ::<= {
                            this.entryDialog(
                                text: 'Name of project:',
                                onEntry::(text){
                                    when (!Project.isNameAllowed(name:text))
                                        this.alert(text: 'Invalid name', onOkay: ::<-this.start());

                                    Project.name = text;
                                    views[0].openFile(name:'main');
                                    Project.save();
                                    selectView(view:views[0]);
                                }
                            );
                        } else ::<= {
                            this.entryDialog(
                                text: 'Open project:',
                                onEntry::(text) {
                                    when (!Project.isNameAllowed(name:text))
                                        this.alert(text: 'Invalid name', onOkay: ::<-this.start());

                                    [::] {
                                        Project.name = text;
                                        Project.load();                                
                                        views[0].openFile(name:'main');
                                        selectView(view:views[0]);
                                    } : {
                                        onError ::(message) {
                                            print(message);
                                            this.alert(text: 'Couldnt open.', onOkay: ::<-this.start());
                                            
                                        }
                                    };
                                }
                            );
                        };
                        
                        
                    }
                );
            
            
            },
            

        
            question::(text => String, onResponse => Function) {
                dialogControl.setup(
                    onYes ::<- onResponse(which:true),
                    onNo  ::<- onResponse(which:false),
                    prompt: text
                );

            },
            
            alert::(text => String, onOkay) {
                
                dialogControl.setup(
                    onOK ::<- if (onOkay) onOkay() else empty,
                    prompt: text
                );

            },

            entryDialog::(text => String, onEntry => Function) {
                dialogControl.setup(
                    onOK ::{
                        onEntry(text:dialogControl.getEntryText());
                    },
                    onEntry,
                    prompt: text
                );
            },
            
        };
    }

).new();

