@:class = import(module:'Matte.Core.Class');
@:JSON = import(module:'Matte.Core.JSON');

@:package_native__save_source  = getExternalFunction(name:"package_native__save_source");
@:package_native__make_project = getExternalFunction(name:"package_native__make_project");
@:package_native__open_source  = getExternalFunction(name:"package_native__open_source");
@:package_native__list_projects= getExternalFunction(name:"package_native__list_projects");

@:checkNameAllowed = ::(name) {
    when(name == '') false;
    return [::] {
        [0, name->length]->for(do:::(i) {
            match(name->charAt(index:i)) {
              (',', '.', '/', '\\', '\n', '\t'): 
                send(message:false)
            };
        });
        return true;
    };
};

return class(
    name: 'Project',
    statics : {
    },
    define:::(this) {
        // name of project. is not allowed to contain slashes or dots.
        @directory;

        // name of source. is not allowed to contain slashes or dots.
        @sources = [
            'main'
        ];
    
        this.interface = {
            isNameAllowed ::(name) {
                return checkNameAllowed(name);
            },

            name : {
                get ::<- directory,
                set ::(value) {
                    package_native__make_project(a:value=>String);                    
                    directory = value;
                }
            },
        
        
            newSource ::(name) {
                when(!checkNameAllowed(name))
                    error(detail:'Invalid name.');
                sources->push(value:name);
                this.save();
                this.saveSource(name, data:'');
            },
        
            openSource ::(name) {
                return package_native__open_source(a:directory, b:name);            
            },
            

            saveSource ::(name, data => String){
                @:index = sources->findIndex(value:name);
                if (index < 0)
                    error(detail:'No such filename. Internal error');
                
                package_native__save_source(a:directory, b:name, c:data); 
            },

            all : {
                get::<-package_native__list_projects()
            },

        
            sources : {
                get::<-[...sources]
            },
            
            save :: {
                @obj = {
                    sources: sources
                };
                // make object for json
                // save project.json file

                package_native__save_source(a:directory, b:'project.json', c:JSON.encode(object:obj));
                // package command native function
            },
            
            load :: {
                @str = this.openSource(name:'project.json');
                @obj = JSON.decode(string:str);
                sources = obj.sources;
            },
            
            package :: {
            
            }
        };
    }
).new();
