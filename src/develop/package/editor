@:View = import(module:'view');
@:SES = import(module:'SES.Core');
@:Debug = import(module:'SES.Debug');
@:class = import(module:'Matte.Core.Class');
@:Fetcher = import(module:'fetcher');
@:highlightLine = import(module:'editor_highlight');
@:completer = import(module:'editor_completion').new();
@:completerBox = import(module:'editor_completion_visual');
@:PALETTE__NORMAL_TEXT = Fetcher.Palette.newID();
@:Textarea = import(module:'textarea');
SES.Palette.set(
    index: PALETTE__NORMAL_TEXT,
    colors: [
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [0.9, 0.9, 0.9]

    ]
);
@:UI = import(module:'ui');




@:SPRITE__BEGIN_TITLE = Fetcher.Sprite.newID();
Fetcher.Sprite.claimIDs(amount:30);




@:Editor = class(
    inherits : [UI],
    define:::(this) {
        @filename = 'main';
        @getSourceData;
        @setSourceData;

        
        this.constructor = ::{

            @:isNonWordChar = ::<= {
                @:map = {
                   '-': true, 
                   '+': true,
                   '!': true, 
                   '@': true, 
                   '#': true, 
                   '$': true, 
                   '%': true, 
                   '^': true, 
                   '&': true,
                   '*': true, 
                   '(': true, 
                   ')': true, 
                   ';': true, 
                   '"': true, 
                   "'": true, 
                   '/': true, 
                   '?': true, 
                   ':': true, 
                   '<': true, 
                   '>': true, 
                   ',': true, 
                   '.': true, 
                   '=': true, 
                   '[': true, 
                   ']': true, 
                   '{': true, 
                   '}': true, 
                   '|': true, 
                   ' ': true,
                   '\n': true, 
                   '\t': true, 
                   '\r': true
                };
                
                return ::(ch) {
                    when (map[ch] == empty) false;
                    return true;
                };
            };
            
            // gets the currently typed over word
            @:getCurrentWord :: {
                when(textarea.cursorX == 0) empty;
                @:text = textarea.getLine(index:textarea.cursorY);
                when(text == '') empty;
                when (isNonWordChar(ch:text->charAt(index:textarea.cursorX-1))) empty;

                @:location = [::] {
                    @i = textarea.cursorX-1;
                    forever(do:::{                    
                        if (i <= 0) send(message:0);
                        if (isNonWordChar(ch:text->charAt(index:i))) send(message:i+1);
                        i -= 1;
                    });
                    
                    return -1;
                };
                when(location == -1) empty;
                @end =  [::] {
                    [location, text->length]->for(do:::(i) {
                        if (isNonWordChar(ch:text->charAt(index:i))) send(message:i-1);
                    });
                    return text->length-1;
                };
	                
                return {location:location, text: text->substr(from:location, to:end)};
            };        

            
            @title = Textarea.new(defaultPalette:PALETTE__NORMAL_TEXT, spriteOffset:SPRITE__BEGIN_TITLE);
            title.text = filename;
            @:Window = import(module:'window');
            @lastWord = {};
            @:textareaid = Fetcher.Sprite.newID();
            Fetcher.Sprite.claimIDs(amount:400);
            @textarea = Textarea.new(
              spriteOffset: textareaid,
              defaultPalette : PALETTE__NORMAL_TEXT,  
              onChange::(prevLine, prevText) {
                highlightLine(
                    textarea,
                    yIndex:textarea.cursorY
                );
                completer.retokenizeLine(index:textarea.cursorY, text:textarea.getLine(index:textarea.cursorY));

                
                @:word = getCurrentWord();
                if (word != empty && word.text != empty && word.text->length > 1) ::<= {
                    lastWord = word;
                    @:suggestions = completer.getSuggestions(word:word.text);
                    if (suggestions->keycount > 0) ::<= {
                        textarea.completionMode = true;
                        @:screenLoc = textarea.cursorToPixelCoords();
                        completerBox.update(
                            x: screenLoc.x ,
                            y: screenLoc.y+8,
                            items: suggestions
                        );
                    } else ::<= {
                        textarea.completionMode = false;
                        completerBox.update(items:[], x:0, y:0);                    
                    };
                } else ::<= {
                    textarea.completionMode = false;
                    completerBox.update(items:[], x:0, y:0);
                };
                

              },

              onNavHorizontal :: {
                textarea.completionMode = false;
                completerBox.update(items:[], x:0, y:0);
              },

              onNavVertical ::(dir) {
                if (textarea.completionMode == true) ::<= {
                    if (dir == 1)
                        completerBox.selectUp()
                    else 
                        completerBox.selectDown()
                    ;
                };
              },


              onEnter :: {
                when(!textarea.completionMode) empty;
                if (textarea.completionMode) ::<= {
                    @:last = completerBox.getCurrentSuggestion();
                    when(last == empty) empty;
                    // need to move the cursor to the end of the word before deletion
                    textarea.moveCursor(x:lastWord.location  + lastWord.text->length);
                    textarea.deleteLineText(numChars:lastWord.text->length);
                    textarea.addText(text:last);
                    textarea.completionMode = false;
                    completerBox.update(items:[], x:0, y:0);

                };
              }

            );
        
            this.events.installHooks(events:{
                onHide ::(detail) {
                    textarea.shown = false;
                },
                
                onShow ::(detail) {
                    textarea.shown = true;
                },
                
                onMove ::(detail) {
                    textarea.x = this.x;
                    textarea.y = this.y;
                },
                
                onResize ::(detail) {
                    textarea. = {
                        widthChars  : ((this.width / 8) * (8 / 6)-1)->floor,
                        heightChars : (this.height / 8)->floor,                        
                    };              
                }
            });

            // full GBA screen
            textarea. = {
                x : this.x * 8,
                y : this.y * 8,
                editable    : true,
                scrollable  : true,
            };

            title. = {
                x : (this.width - 10) * 8,
                y : 0,
                heightChars : 1,
                widthChars : 8,
                editable : false,
                scrollable : false
            };

            getSourceData = ::{
                return textarea.text;
            };
            
            setSourceData = ::(text) {
                textarea.text = text;
                completer.clear();
                [0, textarea.getLineCount()]->for(do:::(i) {
                    highlightLine(textarea, yIndex:i);
                    completer.retokenizeLine(index:i, text:textarea.getLine(index:i));
                });
            };
            this.hide();
            
            return this;
        };



        @:allWhitespace ::(text){
            return [::] {
                [0, text->length]->for(do:::(i) {
                    match(text->charAt(index:i)) {
                      (' ', '\t', '\n', '\r'): empty,
                      default: send(message:false)
                    };
                });
                return true;
            };
        
        };

        
        @:newFile ::{
            @:Window = import(module:'window');
            Window.entryDialog(
                text: 'New script:',
                onEntry:::(text){

                    @:Project = import(module:'project');
                    when (!Project.isNameAllowed(name:text)) 
                        Window.alert(text:'Name not allowed.');
                        
                    Project.newSource(name:text);
                    setSourceData(text:'');
                }
            );                
            
        
        };
        @:removeFile ::{
            @:Window = import(module:'window');
            Window.alert(text:'Cannot remove the main script.');
        };
        @:switchFile ::{
            @:Window = import(module:'window');
            Window.entryDialog(
                text: 'Open which?',
                onEntry:::(text){

                    @:Project = import(module:'project');
                    when (!Project.isNameAllowed(name:text)) 
                        Window.alert(text:'Name not allowed.');
                    setSourceData(text:'');
                    this.openFile(name:text);
                }
            );               
        };
        
        @:saveFile :: {
            @:Project = import(module:'project');
            Project.saveSource(name:filename, data:getSourceData());
            
        };
        
        
        @:NEW_TILE_ID = Fetcher.Tile.newID();
        SES.Tile.set(
            index:NEW_TILE_ID,
            data: [
            1, 1, 1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 2, 2, 0, 0, 1,
            1, 0, 2, 2, 2, 2, 0, 1,

            1, 0, 2, 2, 2, 2, 0, 1,
            1, 0, 0, 2, 2, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 0, 1,
            1, 1, 1, 1, 1, 1, 1, 1,
            ]
        );



        @:SAVE_TILE_ID = Fetcher.Tile.newID();
        SES.Tile.set(
            index:SAVE_TILE_ID,
            data: [
            0, 0, 0, 1, 1, 1, 1, 1,
            0, 0, 1, 0, 0, 0, 0, 1,
            0, 1, 0, 0, 0, 0, 0, 1,
            1, 0, 1, 1, 1, 1, 0, 1,

            1, 0, 0, 0, 0, 0, 0, 1,
            1, 0, 1, 1, 1, 1, 0, 1,
            1, 0, 1, 0, 0, 1, 0, 1,
            1, 1, 1, 1, 1, 1, 1, 1,
            ]
        );
        

        @:REMOVE_TILE_ID = Fetcher.Tile.newID();
        SES.Tile.set(
            index:REMOVE_TILE_ID,
            data: [
            1, 1, 1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 0, 0, 1,
            1, 0, 1, 0, 0, 1, 0, 1,
            1, 0, 0, 1, 1, 0, 0, 1,

            1, 0, 0, 1, 1, 0, 0, 1,
            1, 0, 1, 0, 0, 1, 0, 1,
            1, 0, 0, 0, 0, 0, 0, 1,
            1, 1, 1, 1, 1, 1, 1, 1,
            ]
        );


        @:palette = Fetcher.Palette.newID();
        SES.Palette.set(
            index:palette,
            colors: [
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1]
            ]
        );
        

        
        this.interface = {
            // All the menus within the 
            // view. Should be an array of 
            // arrays, where each inner array 
            // is a string for the menu and a function
            // called when clicking the actions.
            menus : {
                get :: <- [
                    [palette, NEW_TILE_ID , newFile],
                    [palette, SAVE_TILE_ID , saveFile],
                    [palette, REMOVE_TILE_ID, removeFile],                 
                    [palette, NEW_TILE_ID, switchFile]
                ]
            },
            
            
            openFile ::(name) {
                filename = name;
                @:Project = import(module:'project');
                @text = Project.openSource(name);
                if (text != empty)
                    setSourceData(text);
                
            }
        };
        

        
    }
    
);



return Editor;
