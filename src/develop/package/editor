@:View = import(module:'view');
@:SES = import(module:'SES.Core');
@:class = import(module:'Matte.Core.Class');
@:Fetcher = import(module:'fetcher');
@:highlightLine = import(module:'editor_highlight');
@:completer = import(module:'editor_completion').new();
@:completerBox = import(module:'editor_completion_visual');
@:PALETTE__NORMAL_TEXT = Fetcher.Palette.newID();
@:Textarea = import(module:'textarea');
SES.Palette.set(
    index: PALETTE__NORMAL_TEXT,
    colors: [
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [0.9, 0.9, 0.9]

    ]
);





@:SPRITE__BEGIN_TITLE = Fetcher.Sprite.newID();
Fetcher.Sprite.claimIDs(amount:30);




@:Editor = class(
    inherits : [View],
    define:::(this) {
        @filename = 'main';
        @getSourceData;
        @setSourceData;

        
        this.constructor = ::{

            @:isNonWordChar = ::<= {
                @:map = {
                   '-': true, 
                   '+': true,
                   '!': true, 
                   '@': true, 
                   '#': true, 
                   '$': true, 
                   '%': true, 
                   '^': true, 
                   '&': true,
                   '*': true, 
                   '(': true, 
                   ')': true, 
                   ';': true, 
                   '"': true, 
                   "'": true, 
                   '/': true, 
                   '?': true, 
                   ':': true, 
                   '<': true, 
                   '>': true, 
                   ',': true, 
                   '.': true, 
                   '=': true, 
                   '[': true, 
                   ']': true, 
                   '{': true, 
                   '}': true, 
                   '|': true, 
                   ' ': true,
                   '\n': true, 
                   '\t': true, 
                   '\r': true
                };
                
                return ::(ch) {
                    when (map[ch] == empty) false;
                    return true;
                };
            };
            
            // gets the currently typed over word
            @:getCurrentWord :: {
                when(textarea.cursorX == 0) empty;
                @:text = textarea.getLine(index:textarea.cursorY);
                when(text == '') empty;
                when (isNonWordChar(ch:text->charAt(index:textarea.cursorX-1))) empty;

                @:location = [::] {
                    @i = textarea.cursorX-1;
                    forever(do:::{                    
                        if (i <= 0) send(message:0);
                        if (isNonWordChar(ch:text->charAt(index:i))) send(message:i+1);
                        i -= 1;
                    });
                    
                    return -1;
                };
                when(location == -1) empty;
                @end =  [::] {
                    [location, text->length]->for(do:::(i) {
                        if (isNonWordChar(ch:text->charAt(index:i))) send(message:i-1);
                    });
                    return text->length-1;
                };
	                
                return {location:location, text: text->substr(from:location, to:end)};
            };        

            
            @title = Textarea.new(defaultPalette:PALETTE__NORMAL_TEXT, spriteOffset:SPRITE__BEGIN_TITLE);
            title.text = filename;

            @:Window = import(module:'window');
            @textarea = Window.createTextBox(
              defaultPalette : PALETTE__NORMAL_TEXT,  
              onChange:: {
                highlightLine(
                    textarea,
                    yIndex:textarea.cursorY
                );
                completer.retokenizeLine(index:textarea.cursorY, text:textarea.getLine(index:textarea.cursorY));

                
                @:word = getCurrentWord();
                if (word != empty) ::<= {
                    textarea.completionMode = true;
                    @:suggestions = completer.getSuggestions(word:word.text);
                    @:screenLoc = textarea.cursorToPixelCoords();
                    completerBox.update(
                        x: word.location*6,
                        y: screenLoc.y+8,
                        items: suggestions
                    );
                } else ::<= {
                    textarea.completionMode = false;
                    completerBox.update(items:[], x:0, y:0);
                };
                

              }

            );


            // full GBA screen
            textarea. = {
                widthChars  : this.width * (8 / 6)-1,
                heightChars : this.height,    
                x : this.x * 8,
                y : this.y * 8,
                editable    : true,
                scrollable  : true,
            };

            title. = {
                x : (this.width - 10) * 8,
                y : 0,
                heightChars : 1,
                widthChars : 8,
                editable : false,
                scrollable : false
            };

            getSourceData = ::{
                return textarea.text;
            };
            
            setSourceData = ::(text) {
                textarea.text = text;
                completer.clear();
                [0, textarea.getLineCount()]->for(do:::(i) {
                    highlightLine(textarea, yIndex:i);
                    completer.retokenizeLine(index:i, text:textarea.getLine(index:i));
                });
            };
            return this;
        };



        @:allWhitespace ::(text){
            return [::] {
                [0, text->length]->for(do:::(i) {
                    match(text->charAt(index:i)) {
                      (' ', '\t', '\n', '\r'): empty,
                      default: send(message:false)
                    };
                });
                return true;
            };
        
        };

        
        @:newFile ::{
            @:Window = import(module:'window');
            Window.entryDialog(
                text: 'New script:',
                onEntry:::(text){

                    @:Project = import(module:'project');
                    when (!Project.isNameAllowed(name:text)) 
                        Window.alert(text:'Name not allowed.');
                        
                    Project.newSource(name:text);
                    setSourceData(text:'');
                }
            );                
            
        
        };
        @:removeFile ::{
            @:Window = import(module:'window');
            Window.alert(text:'Cannot remove the main script.');
        };
        @:switchFile ::{
            @:Window = import(module:'window');
            Window.entryDialog(
                text: 'Open which?',
                onEntry:::(text){

                    @:Project = import(module:'project');
                    when (!Project.isNameAllowed(name:text)) 
                        Window.alert(text:'Name not allowed.');
                    setSourceData(text:'');
                    this.openFile(name:text);
                }
            );               
        };
        
        @:saveFile :: {
            @:Project = import(module:'project');
            Project.saveSource(name:filename, data:getSourceData());
            
        };
        
        this.interface = {
            // All the menus within the 
            // view. Should be an array of 
            // arrays, where each inner array 
            // is a string for the menu and a function
            // called when clicking the actions.
            menus : {
                get :: <- [
                    [' New  ' , newFile],
                    [' Save ' , saveFile],
                    [' Del. ', removeFile],                 
                    [' Open ', switchFile]
                ]
            },
            
            
            // called when a view is entered
            onViewActive ::{


            
            },
            
            // called when a view is left.
            onViewPause ::{},
            
            
            openFile ::(name) {
                filename = name;
                @:Project = import(module:'project');
                @text = Project.openSource(name);
                if (text != empty)
                    setSourceData(text);
                
            }
        };
    }
    
);



return Editor;
