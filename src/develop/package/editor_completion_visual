@:SES = import(module:'SES.Core');
@:class = import(module:'Matte.Core.Class');
@:Fetcher = import(module:'fetcher');
@:Textarea = import(module:'textarea');


@:LAYER = 3;

@:PALETTE_TEXT = Fetcher.Palette.newID();
SES.Palette.set(
    index : PALETTE_TEXT,
    colors : [
        [0, 0, 0],
        [0.3, 0.3, 0.3],
        [0.6, 0.6, 0.6],
        [1, 1, 1]
    ]
);

@textOffset = Fetcher.Sprite.newID();        
Fetcher.Sprite.claimIDs(amount:100);



// 2 BGs are used:
// 1 is always there,
// the second one is translated
// from the topleft position as needed.

// each BG is 10x5
@:BG_TILE_ON = Fetcher.Tile.newID();
@:BG_TILE_OFF = Fetcher.Tile.newID();
@:PALETTE_BG = Fetcher.Palette.newID();
@:BG_LEFT = Fetcher.Background.newID();
@:BG_RIGHT = Fetcher.Background.newID();
SES.Palette.set(
    index : PALETTE_BG,
    colors : [
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]
    ]
);

SES.Tile.set(
    index:BG_TILE_OFF,
    data : [
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,

        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0
    ]
);

SES.Tile.set(
    index:BG_TILE_ON,
    data : [
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,

        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1
    ]
);



// setup backgrounds
@:BG_LEFT__TILE_OFFSET = Fetcher.backgroundIDtoTileID(id:BG_LEFT);
@:BG_RIGHT__TILE_OFFSET = Fetcher.backgroundIDtoTileID(id:BG_RIGHT);
::<= {
    @iter = BG_LEFT__TILE_OFFSET;
    [0, 16]->for(do:::(y) {
        [0, 32]->for(do:::(x) {
            if (x <= 15 && y <= 5) 
                SES.Tile.copy(from:BG_TILE_ON, to:iter)
            else 
                SES.Tile.copy(from:BG_TILE_OFF, to:iter);

            iter += 1;
        });
    });


    iter = BG_RIGHT__TILE_OFFSET;
    [0, 16]->for(do:::(y) {
        [0, 32]->for(do:::(x) {
            if (x <= 15 && y <= 5) 
                SES.Tile.copy(from:BG_TILE_ON, to:iter)
            else 
                SES.Tile.copy(from:BG_TILE_OFF, to:iter);

            iter += 1;
        });
    });

};





@:text = Textarea.new(defaultPalette:PALETTE_TEXT, spriteOffset:textOffset);


text. = {
    editable : false,
    layer: LAYER
};


@current = 0;
@currentList = [];
return class(
    define:::(this) {
        this.interface = {
            update ::(x, y, items) {
                @o = '';
                items->foreach(do:::(i, item => String) {
                    if (item != '') ::<= {
                        o = o + (if(current == i) '>>' else '  ') + item + '\n';
                    };
                });
                text.text = o;
                currentList = [...items];
                text.x = x;
                text.y = y;
                if (o == '')
                    SES.Background.set(index:BG_LEFT, show: false)
                else
                    SES.Background.set(index:BG_LEFT, show: true, x, y, palette:PALETTE_BG, layer:LAYER, effect: SES.Sprite.EFFECTS.Color);
            },

            getCurrentSuggestion :: {
                return currentList[current]; // for now. normally, its the one highlighted.
            }
        };
    }
).new();
