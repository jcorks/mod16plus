@:class = import(module:'Matte.Core.Class');
@:Fetcher = import(module:'fetcher');
@:SES = import(module:'SES.Core');
@:Debug = import(module:'SES.Debug');
@:EventSystem = import(module:'Matte.Core.EventSystem');


@:UI_BG_TILE_ON = Fetcher.Tile.newID();
SES.Tile.set(
    index:UI_BG_TILE_ON,
    data: [
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1    
    ]
);








@:UI = class(
    define:::(this) {
        @:children = [];
        @:childRequests = [];
        @parent;
        @layer = 0;
        @x_ = 0;
        @y_ = 0;
        @height_ = 8;
        @width_ = 8;
        @shown = true;
        @enableBackground = true;
        @events = EventSystem.new();

        @:backgroundSpriteID = Fetcher.Sprite.newID();
        @:backgroundPalette = Fetcher.Palette.newID();

        @:readjustBackground ::{
            SES.Sprite.set(index:backgroundSpriteID,   show:false);
            when(!shown) empty;
            when(!enableBackground) empty;
 
            SES.Sprite.set(
                index:backgroundSpriteID, 
                tile: UI_BG_TILE_ON,
                show:true, 
                palette:backgroundPalette,
                x:x_,
                y:y_,
                layer:this.layer,
                effect: 
                SES.Sprite.EFFECTS.Color
            );
            print(message: 'bg' + width_ + ', '+ height_);
            print(message: 'ps' + x_ + ', '+ y_);
            SES.Sprite.transform(
                index:backgroundSpriteID, 
                scaleX: width_ / 8,
                scaleY: height_ / 8
            );


        };
        
        
        events.events = {
            onMove ::(detail) {
            
            },
            onShow ::(detail) {
                shown = true;
                readjustBackground();                      
                children->foreach(do:::(i, child) <- child.show());
            },
            
            onHide ::(detail) {
                shown = false;
                readjustBackground();
                children->foreach(do:::(i, child) <- child.hide());
            
            },
            
            onEnable ::(detail) {
                children->foreach(do:::(i, child) <- child.enable());
            },           
            
            onDisable ::(detail) {
                children->foreach(do:::(i, child) <- child.disable());            
            },
            
            onResize ::(detail) {
                readjustBackground();            
            },
            
            onAddChild ::(detail) {            

            },
            
            onMove ::(detail) {
                readjustBackground();            
            },
            
            onEnter ::(detail) {
            
            },
            
            
            onLeave ::(detail) {
            
            },
            
            onLayerChange ::(detail) {
                children->foreach(do:::(i, child) <- child.layer = this.layer + 1);
                readjustBackground();
            }
            
            
            
        };
    
    
    
        this.interface = {

            show :: {
                when(shown) empty;
                events.emit(event:'onShow');      
            },
            
            events : {
                get::<- events
            },
            
            hide :: {
                when(!shown) empty;
                events.emit(event:'onHide');
            },
            
            shown : {
                get ::<- shown
            },

            enable :: {
                events.emit(event:'onEnable'); 
            },

            disable :: {
                events.emit(event:'onDisable'); 
            },
            
            x : {
                get ::<- x_
            },
            
            y : {
                get ::<- y_
            },
            

            width : {
                get :: <- width_
            },


            height : {
                get :: <- height_
            },
            
            resize ::(width, height) {
                width_ = width;
                height_ = height;  
                events.emit(event:'onResize');
            },
            
            children : {
                get ::<- [...children]
            },
            
            childrenSizeRequests : {
                get ::<- [...childRequests]
            },
            
            layer : {
                get ::<- layer,
                set ::(value) {
                    layer = value;
                    events.emit(event:'onLayerChange');
                }
            },
            
            parent : {
                get ::<- parent
            },

            addChild ::(child, sizeRequest) {
                children->push(value:child);
                childRequests->push(value:sizeRequest);
                events.emit(event:'onAddChild');
                child.layer = this.layer - 1;
            },

            // empty -> no background
            background : {
                set ::(value) {
                    SES.Palette.set(
                        index:backgroundPalette,
                        colors: [
                            value,
                            value,
                            value,
                            value
                        ]
                    );
                    readjustBackground();
                }
            },

            
            move ::(x, y) {  
                x_ = x;
                y_ = y;              
                events.emit(event:'onMove');
            },
            
            enableBackground : {
                set::(value) {
                    enableBackground = value;
                    readjustBackground();
                }
            }   
            
            
        
        
        };
        this.background = '#111111';
    }
);

return UI;
