/*
    Singleton-based ID transaction system
    Makes it easy to instance your IDs!
*/

@:class = import(module:'Matte.Core.Class');
@:SES = import(module:'SES.Core');


@:Fetcher = class(
    name: 'Fetcher',
    define:::(this) {
        @count = 0;

        this.constructor = ::(offset) {
            if (offset != empty)
                count = offset => Number;

            return this;
        };

        this.interface = {
        
            // Fetches the next free ID
            newID :: {
                count += 1;
                return count;
            },
            
            // Skips the next count IDs. Used 
            // to simulate claiming groups of IDs 
            // that are off-limits to other users.
            claimIDs::(amount) {
                count += amount;
            }
        };
    }
);


@:FetcherSprite = class(
    name: 'Fetcher::Sprite',
    define:::(this) {
        @count = 0;

        this.constructor = ::(offset) {
            if (offset != empty)
                count = offset => Number;

            return this;
        };

        this.interface = {
        
            // Fetches the next free Sprite ID and initializes the sprite
            newID :: {
                count += 1;
                SES.Sprite.set(
                    index: count,                    
                    scaleX:1,
                    scaleY:1,
                    x:-8,
                    y:-8,
                    show:false,
                    centerX: 0,
                    centerY: 0
                );
                return count;
            },
            
            // Skips the next count IDs. Used 
            // to simulate claiming groups of IDs 
            // that are off-limits to other users.
            claimIDs::(amount) {
                [count, count+amount]->for(do:::(i) {
                    SES.Sprite.set(
                        index: i,                    
                        scaleX:1,
                        scaleY:1,
                        x:-8,
                        y:-8,
                        show:false,
                        centerX: 0,
                        centerY: 0
                    );
                
                });
                count += amount;
            }
        };
    }
);

return {
    // Fetcher for sprite IDs
    Sprite : FetcherSprite.new(),
    
    // Fetcher for background IDs
    Background : Fetcher.new(),
    
    // Fetcher for IDs.
    Palette : Fetcher.new(),
    
    // Fetcher for (sprite) IDs. Only "makes sense" 
    // up to 0x40000.
    Tile : Fetcher.new(offset:128),
    
    
    // Convenience function that gives the local tile ID 
    // that the given background starts at.
    // Backgrounds are always 16 x 8 tiles.
    backgroundIDtoTileID::(id) {
        return 0x40000 + (id * 32*16);
    }
};
