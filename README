Sprite Entertainment System
-----------------------------

THIS IS JUST A PREVIEW. Nothing is working yet!

The SES is a development kit and system to produce and play games 
with the look and feel of early generations of game consoles.





It is split into 3 parts:

ses developer:  The UI that generates and modifies Cartridge ROMs.
ses: The player that, when given a Cartridge ROM, allows for playing it 
ses debug: Similar to ses, but enables debugging features, which
makes it convenient to debug ROMs.


Cartridge ROMs consist of different segments of binary data:
- Game bytecode that controls the game's logic
- Audio waveform data for audio samples
- Initial tile data 
- Initial palette data




Tile-based Rendering 
--------------------

Rendering is based on tiles, which are 5-bit images 
8x8 in size. Tiles are the visual primitive of the SES.

Each pixel of a tile can be 5 possible values:
0 -> Transparent 
1 -> Back color 
2 -> Mid-back color 
3 -> Mid-front color 
4 -> Front color

Where each are an index into the palette. The real, on-screen 
color comes from the palette, which is what defines the 
color used for each pixel when rendered.

There are 2 kinds of tiles:

. Sprite tiles. These are used render sprites,
  which consist of 1 tile that can be rotated, scaled, and translated.
  
. Background tiles. These are used for backgrounds, which are sets of 
  tiles all rendered simultaneously, which is useful for images greater 
  than 8x8. Backgrounds can only be translated.


Tiles of any kind can be copied and moved around 
freely within the same cartridge, so sprite tile memory can be used as "overflow"
or working tile memory.

Sprites
-------

Each sprite consists of 1 tile and can have transform effects
(position, rotation, scale) applied to it. This can be 
useful for particle effects, characters, anything thats 
more-or-less dynamic.

Sprites can use tiles from IDs 0 to 0x400-1


Backgrounds
-----------

Backgrounds may be used to render collections of tiles 
simulaneously. This can be convenient for background visuals,
large images, and more. 

Backgrounds are specifically collections of tiles in 
a predefined order. Backgrounds are 32 tiles wide and 
16 tiles tall, so theyre always the same dimensions. They 
pull from tiles from topleft, to the right, and down.
For example:

0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15
16 17 18 19 20 21 22 23 ...
...

And so on.

Backgrounds only use background tiles, which start at 
tile ID 0x400 and go until tile 0x4400-1

Effects
-------

All rendered tiles have multiple possible rendering effects.
The default is "Color mode" where each color of a pixel displayed
and the pixel "on top" is the one on-screen.
"Blending mode" will color based on adding color values together.

Masking is also available, which can control which pixels make it 
to the screen or not.


Layers
------

Each background and sprite have a layer upon which theyre drawn.
Layers are used to control the order in which things appear 
on-screen. Earlier layers are drawn first, with backgrounds drawn 
before sprites for each layer, giving the effect of larger 
numbers appearing on top. Layers -63 through and including 64 exist for use.
The default of 0 will place items midway.


Vertices (3D)
--------
Each cartridge has limited 3D capability via vertices.
1024 vertices can be displayed per cartridge. There are no 
ways to load vertices using files, so they have to be generated 
on-the-fly or in sources as constant data.

Thus, vertices are best used sparringly as flourishes and effects.
However, with enough sub-cartridges, complex 3D endaevors are 
possible.

Each vertex has the following data:
- x position, clamped on -1, 1
- y position, clamped on -1, 1
- z position, clamped on -1, 1 (depth buffer bit-depth: 5 (32 values))
- red color, clamped on 0, 1
- green color, clamped on 0, 1
- blue color, clamped on 0, 1
- u texture coordinate, clamped 
- v texture coordinate, clamped
- tile texture (colorized by color and palette)
- palette texture


There exist data pieces that affect vertices as well:
- Effect (rendering mode): see sprite
- Transform - 4x4 matrix for all vertices when drawn. I.e. perspective 
- Primitive - Lines or Triangles, determine how to use vertices




Oscillators
-----------

In addition to sprite based rendering, oscillators also exist 
as tools in the game making process. Oscillators serve 2 functions:
The first is a timer mechanism: oscillators can fire a function once 
a cycle is complete. The second is a time-sensitive version 
of a sin() function, which is ideal for creating oscillation-based
effects. Oscillators may be chained together for advanced effects.

Cartridges
----------

SES runs what are called cartridges. Cartridges as a whole refer to 
both the cartridge ROM file as well as runtime resources which it 
governs

Each cartridge controls its own resources (sprites, tiles, oscillators, 
etc.) and uses them independent of other cartridges. Each cartridge's
capabilities are small, so it is likely that a full game will involve
multiple cartridges.

Resource limits:
- Tiles: 1024 
- Backgrounds: 32
- Palettes: 512
- Sprites: 512
- Oscillators: 32
- Sounds: 128
- Sources: 64
- Sub-cartridges: 128
- Vertices: 1024

Sub-Cartridges
--------------

Because of the limits of each cartridge, one cartridge
usually cannot get the job done alone. Instead a cartridge can 
refer to additional sub-cartridges to extend its behavior.

Each cartridge can only refer to its own resources, so sub-cartridges 
have a special "output" script, which returns an object 
usable in other cartridges. This makes it easy to split up 
and reuse pieces of projects in other, additional projects.

