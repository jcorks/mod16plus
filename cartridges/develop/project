@:class = import(module:'Matte.Core.Class');
@:JSON = import(module:'Matte.Core.JSON');
@:Mod16 = import(module:'Mod16Plus.Core');

@:checkNameAllowed = ::(name) {
    when(name == '') false;
    return [::] {
        [0, name->length]->for(do:::(i) {
            match(name->charAt(index:i)) {
              (',', '.', '/', '\\', '\n', '\t'): 
                send(message:false)
            };
        });
        return true;
    };
};

return class(
    name: 'Project',
    statics : {
    },
    define:::(this) {

        // name of source. is not allowed to contain slashes or dots.
        @sources = [
            'main'
        ];
        
        // palette entries. Arrays of id followed by a path to a palette file (plaintext)
        @palettes = [];
    
        // tile entries. Arrays of id followed by a path to a tile file (plaintext)
        @tiles = [];
    
        // subcartridges. Array of strings. THe names paths are the
        @subcartridges = [];
    
        this.interface = {
            isNameAllowed ::(name) {
                return checkNameAllowed(name);
            },

        
            newSubcartridge ::(name) {
                when(subcartridges->findIndex(value:name) != -1) empty;
                subcartridges->push(value:name);
                
            },
            
            removeSubcartridge ::(name) {
                @index = subcartridges->findIndex(key:name);
                when(index == -1) empty;
                subcartridges->remove(key:index);
            
            },
            
            
        
        
        
        
        
            newPalette ::(id => Number) {
                // check if exists.
                palettes->foreach(do:::(index, value) {
                    when(value[0] == id) error(detail:'Palette already exists!');
                });
                
                palettes->push(value:[id, 'palette_'+id]);
                Mod16.File.saveText(name:'palette_'+id, data: '1 0 1  0 1 0  0 0 1  1 1 1  1 1 0');
            },
            
            savePalette ::(id => Number, paletteColors => Object) {
                @entry;
                when([::] {
                    palettes->foreach(do:::(index, value) {
                        when(value[0] == id) ::<= {
                            entry = value;
                            send(message:false);
                        };
                    });
                    return true;
                }) error(detail:'No such palette exists');

    
                Mod16.File.saveText(name:entry[1], data:
                    '' + 
                    paletteColors[0] + ' ' + paletteColors[1] + ' ' + paletteColors[2] + ' ' +
                    paletteColors[3] + ' ' + paletteColors[4] + ' ' + paletteColors[5] + ' ' +
                    paletteColors[6] + ' ' + paletteColors[7] + ' ' + paletteColors[8] + ' ' +
                    paletteColors[9] + ' ' + paletteColors[10] + ' ' + paletteColors[11] + ' ' +
                    paletteColors[12] + ' ' + paletteColors[13] + ' ' + paletteColors[14]
                );
            },
            
            openPalette ::(id => Number) {
                @entry;
                when([::] {
                    palettes->foreach(do:::(index, value) {
                        when(value[0] == id) ::<= {
                            entry = value[1];
                            send(message:false);
                        };
                    });
                    return true;
                }) error(detail:'No such palette exists');
            
                @:out = [];
                @:text = Mod16.File.openText(name:entry);
                text->split(token:' ')->foreach(
                    do:::(index, token) {
                        when(token == '') empty;
                        out->push(value:Number.parse(string:token));
                    }                   
                );
                return out;
            },
        
            removePalette ::(id => Number) {
                @entry;
                when([::] {
                    palettes->foreach(do:::(index, value) {
                        when(value[0] == id) ::<= {
                            entry = index;
                            send(message:false);
                        };
                    });
                    return true;
                }) error(detail:'No such palette exists');


                palettes->remove(key:entry);
            },      
            
            
            
            
            
            
            
            
            
            
            
            newTile ::(id => Number) {
                when(id >= 0x80000)
                    error(detail:'Number too high!');

            
                // check if exists.
                tiles->foreach(do:::(index, value) {
                    when(value[0] == id) error(detail:'Tile already exists!');
                });
                
                tiles->push(value:[id, 'tile_'+id]);
                Mod16.File.saveText(name:'tile_'+id, data: 
                    String.combine(strings: [
                        '0 0 0 0 0 0 0 0\n',
                        '0 0 0 0 0 0 0 0\n',
                        '0 0 0 0 0 0 0 0\n',
                        '0 0 0 0 0 0 0 0\n',

                        '0 0 0 0 0 0 0 0\n',
                        '0 0 0 0 0 0 0 0\n',
                        '0 0 0 0 0 0 0 0\n',
                        '0 0 0 0 0 0 0 0\n'
                    ])
                    
                );
            },
            
            saveTile ::(id => Number, data => Object) {
                @entry;
                when([::] {
                    tiles->foreach(do:::(index, value) {
                        when(value[0] == id) ::<= {
                            entry = value;
                            send(message:false);
                        };
                    });
                    return true;
                }) error(detail:'No such tile exists');

    
                Mod16.File.saveText(name:entry[1], data:
                    String.combine(
                        strings: [
                            ' '+data[0],  ' '+ data[1],  ' '+ data[2],  ' '+ data[3],  ' '+ data[4],  ' '+ data[5],  ' '+ data[6],  ' '+ data[7], '\n',
                            ' '+data[8],  ' '+ data[9],  ' '+ data[10], ' '+ data[11], ' '+ data[12], ' '+ data[13], ' '+ data[14], ' '+ data[15], '\n',
                            ' '+data[16], ' '+ data[17], ' '+ data[18], ' '+ data[19], ' '+ data[20], ' '+ data[21], ' '+ data[22], ' '+ data[23], '\n',
                            ' '+data[24], ' '+ data[25], ' '+ data[26], ' '+ data[27], ' '+ data[28], ' '+ data[29], ' '+ data[30], ' '+ data[31], '\n',
                            ' '+data[32], ' '+ data[33], ' '+ data[34], ' '+ data[35], ' '+ data[36], ' '+ data[37], ' '+ data[38], ' '+ data[39], '\n',
                            ' '+data[40], ' '+ data[41], ' '+ data[42], ' '+ data[43], ' '+ data[44], ' '+ data[45], ' '+ data[46], ' '+ data[47], '\n',
                            ' '+data[48], ' '+ data[49], ' '+ data[50], ' '+ data[51], ' '+ data[52], ' '+ data[53], ' '+ data[54], ' '+ data[55], '\n',
                            ' '+data[56], ' '+ data[57], ' '+ data[58], ' '+ data[59], ' '+ data[60], ' '+ data[61], ' '+ data[62], ' '+ data[63]                     
                        ]
                    )
                );
            },
            
            openTile ::(id => Number) {
                @entry;
                when([::] {
                    tiles->foreach(do:::(index, value) {
                        when(value[0] == id) ::<= {
                            entry = value[1];
                            send(message:false);
                        };
                    });
                    return true;
                }) error(detail:'No such tile exists');
            
                @:out = [];
                @text = Mod16.File.openText(name:entry);
                text = text->replace(key:'\n', with: ' ');
                text->split(token:' ')->foreach(
                    do:::(index, token) {
                        when(token == '') empty;
                        out->push(value:Number.parse(string:token));
                    }                   
                );
                return out;
            },
        
            removeTile ::(id => Number) {
                @entry;
                when([::] {
                    tiles->foreach(do:::(index, value) {
                        when(value[0] == id) ::<= {
                            entry = index;
                            send(message:false);
                        };
                    });
                    return true;
                }) error(detail:'No such tile exists');


                tiles->remove(key:entry);
            },                
            
            
            
            
            
            
            
              
        
            newSource ::(name) {
                when(!checkNameAllowed(name))
                    error(detail:'Invalid name.');
                sources->push(value:name);
                this.save();
                this.saveSource(name, data:'');
            },
        
            openSource ::(name) {
                return Mod16.File.openText(name);            
            },
            

            saveSource ::(name, data => String){
                @:index = sources->findIndex(value:name);
                if (index < 0)
                    error(detail:'No such filename. Internal error');
                
                Mod16.File.saveText(name, data); 
            },

            removeSource ::(name) {
                sources->remove(key:sources->findIndex(value:name));
            },

        
            sources : {
                get::<-[...sources]
            },
            
            subcartridges : {
                get::<- [...subcartridges]
            },
            
            palettes : {
                get::<- [...palettes]
            },

            tiles : {
                get::<- [...tiles]
            },



            save :: {
                @obj = {
                    sources: sources,
                    palettes: palettes,
                    tiles: tiles,
                    subcartridges: subcartridges
                };
                // make object for json
                // save project.json file

                Mod16.File.saveText(name:'cartridge.json', data:JSON.encode(object:obj));
                // package command native function
            },
            
            load :: {
                @str = this.openSource(name:'cartridge.json');
                @obj = JSON.decode(string:str);
                sources = obj.sources;
                palettes = obj.palettes;
                tiles = obj.tiles;
                subcartridges = obj.subcartridges;
            },
            
            package :: {
            
            }
        };
    }
).new();
