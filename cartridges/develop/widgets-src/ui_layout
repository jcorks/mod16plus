@:class = import(module:'Matte.Core.Class');
@:Mod16 = import(module:'Mod16Plus.Core');
@:Cartridge = Mod16.Cartridge;
@:UI = Cartridge.import(source:'ui');
return class(
    inherits:[UI],
    define:::(this) {
        @padding = 1;
        @freezeReset = false;
        @:resetChildren ::{
            @:requests =  this.childrenSizeRequests;
            @last = 0;
            this.children->foreach(do:::(i, child) {
                child.move(x: padding + this.x, y: padding + this.y + last);
                child.resize(
                    width:this.width - padding*2,
                    height:requests[i]*this.height - padding*2
                );
                last += requests[i]*this.height;
            });
        };        
        
        
        
        this.constructor = ::(
            children => Object,
            enableBackground
        ) {
            if (enableBackground != empty) this.enableBackground = enableBackground;
            this.reset(children);
            return this;
        };
        
        
        this.events.installHooks(
            events: {
                onChildCountChange ::(detail){
                    when(freezeReset) empty;
                    resetChildren();            
                },                            
                
                onResize ::(detail) {
                    resetChildren();            
                },
                
                onMove ::(detail) {
                    resetChildren();            
                }
            }
        );        
        
        
        this.interface = {
            padding: {
                set ::(value => Number) {
                    padding = value;
                    resetChildren();
                }
            },
            
            reset::(children) {
                freezeReset = true;            
                this.clearChildren();
                children->foreach(do:::(i, value){
                    this.addChild(child:value[0] => Object, sizeRequest:value[1] => Number);
                });
                freezeReset = false;
                resetChildren();            
            }
        
            
        };
    }
);
