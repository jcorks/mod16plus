@:class = import(module:'Matte.Core.Class');
@:Mod16 = import(module:'Mod16Plus.Core');
@:Cartridge = Mod16.Cartridge;
@:Fetcher = Cartridge.import(source:'fetcher');
@:UI = Cartridge.import(source:'ui');

return class(
    inherits:[UI],
    define:::(this) {
    
        @:sprite = Fetcher.Sprite.newID();
        @tile = Fetcher.Tile.newID();
        @paletteID = Fetcher.Palette.newID();
        @pen = 1;
        @onDraw = ::{};
        @needsUpdate = false;
        
        Cartridge.Sprite.bind(index:sprite);
        Cartridge.Sprite. = {
            tile:tile,
            palette:paletteID
        };  
        
        
        
        
        


        @size = 64;        
        @inputid;
        @down = false;
        @:connectInput = ::{ 
            when(inputid != empty) empty;  
            inputid = Mod16.Input.addCallback(
                device: Mod16.Input.DEVICES.POINTER0,
                callback ::(event, x, y, button) {
                
                    
                
                    match(event) {                    
                      (Mod16.Input.EVENTS.POINTER_BUTTON_DOWN):::<= {
                        down = true;
                      },
                      (Mod16.Input.EVENTS.POINTER_BUTTON_UP):::<= {
                        down = false;
                        if (needsUpdate) onDraw();
                        needsUpdate = false;
                      }
                    };
                    
                    
                    when(down) ::<= {
                        @:thisx = this.x + this.width / 2 - size / 2;
                        @:thisy = this.y + this.height / 2 - size / 2;




                        when (x < thisx || x > thisx + size || y < thisy || y > thisy + size) empty; 
                        
                        @:px = (((x - thisx) / size)*8)->floor;
                        @:py = (((y - thisy) / size)*8)->floor;
                        
                        
                        if (tile) ::<= {
                            @data = Cartridge.Tile.get(index:tile);
                            @:index = (px + py * 8)->floor; 
                            if (data[index] != pen) ::<= {
                                data[index] = pen;
                                Cartridge.Tile.set(index:tile, data);
                                needsUpdate = true;
                            };
                        };
                        
                        
                        print(message:''+px + ', ' + py);
                    
                    };
                }
            );
        };        
        
        connectInput();
        @:reposition :: {
            Cartridge.Sprite.bind(index:sprite);
            Cartridge.Sprite. = {
                x:this.x + this.width / 2 - size / 2,
                y:this.y + this.height / 2 - size / 2,
                scaleX: size / 8,
                scaleY: size / 8
            };

        
        };
        this.events.installHooks(
            events:{
                onShow ::(detail){
                    Cartridge.Sprite.bind(index:sprite);
                    Cartridge.Sprite.show = true;
                    connectInput();
                },
                
                onHide ::(detail){
                    Cartridge.Sprite.bind(index:sprite);
                    Cartridge.Sprite.show = false;

                    if (inputid != empty) ::<= {
                        Mod16.Input.removeCallback(device:Mod16.Input.DEVICES.POINTER0, id:inputid);
                        inputid = empty;
                    };
                    down = false;

                },
                
                onResize ::(detail) {
                    reposition();
                },
                
                onMove ::(detail) {
                    reposition();
                },
                
                onLayerChange::(detail) {
                    Cartridge.Sprite.bind(index:sprite);
                    Cartridge.Sprite.layer = this.layer;
                }

            }
        );        
        
        this.constructor = ::() {
            Cartridge.Sprite.bind(index:sprite);
            Cartridge.Sprite. = {
                show:true,
                layer: this.layer
            };  
            return this;
        };
        
        this.interface = {
            palette : {
                set ::(value => Object) {
                    Cartridge.Palette.set(
                        index:paletteID,
                        colors: value
                    );  
                }
            },

            tile : {
                set ::(value => Object) {
                    Cartridge.Tile.set(
                        index:tile,
                        data: value
                    );  
                },
                
                get :: {
                    return Cartridge.Tile.get(
                        index:tile
                    );
                }
            },


            onDraw : {
                set ::(value => Function) {
                    onDraw = value;
                }
                
            },
            
            pen : {
                set ::(value => Number) {
                    pen = value;
                }
            },

            size : {
                set ::(value => Number) {
                    size = value;
                    reposition();
                }
            }
            
        };

        this.enableBackground = false;
        //this.background = '#030303';
    }
);
