@:Mod16 = import(module:'Mod16Plus.Core');
@:Cart = Mod16.Cartridge;
@:Sprite = Cart.Sprite;

// Sets ascii tiles 
// that can be used for displaying text



@offset = 0;








@count = 0;
@paletteCount = 0;
@free = [];

@countPalettes = 0;
@freePalettes = [];

@:GLYPH_HEIGHT = 8;
@:GLYPH_WIDTH = 6;


return {
    create::(string, x, y, color, layer) {
        if (layer == empty) layer = 0;
        @refs = {
            sprites : [],
            palettes : [
                if (freePalettes->keycount) 
                        freePalettes->pop
                  else ::<= {
                        paletteCount += 1;
                        return paletteCount - 1;
                  } 
            ]
        };
        
        Cart.Palette.set(
            index:refs.palettes[0],
            colors: [
                color,
                color,
                color,
                color,
                color
            ]
        );
        
        
        @chX = 0;
        @chY = 0;
                
        for(0, string->length)::(i) {
            @spr = if (free->keycount) free->pop else ::<= {
                count += 1;
                return count - 1;
            };
            Sprite.bind(index:spr);
            Sprite. = {
                tile: string->charCodeAt(index:i),
                show: true,
                x: chX * GLYPH_WIDTH  + x,
                y: chY * GLYPH_HEIGHT + y,
                palette:refs.palettes[0],
                layer:layer
            };
            chX += 1;
            refs.sprites->push(value:spr);
        }
        return refs;
    },
    
    recolor ::(refs, color, from, to) {
        @p = if (freePalettes->keycount) 
            freePalettes->pop
        else ::<= {
            paletteCount += 1;
            return paletteCount - 1;
        };

        Cart.Palette.set(
            index:refs.p,
            colors: [
                color,
                color,
                color,
                color,
                color
            ]
        );

        for(from, to) ::(i) {
            Sprite.bind(index:refs.sprites[i]);
            Sprite.palette = p;
        }
    
         
        refs.palettes->push(value:p);
        
    },
    
    
    destroy::(refs) {
        refs.sprites->foreach(do:::(i, spr) {
            Sprite.bind(index:spr);
            Sprite.show = false;
        });
        
        refs.sprites->foreach(do:::(i, v) {
            free->push(value:v);
        });

        refs.palettes->foreach(do:::(i, v) {
            freePalettes->push(value:v);
        });
    }
};
